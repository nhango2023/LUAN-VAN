import streamlit as st
import openai
import fitz  # PyMuPDF for PDFs
from docx import Document  # For Word documents
import re  # Regular expressions for chapter splitting
import json  # Import the json module

# Set your OpenAI API key
with open("apikey.txt", "r") as f:
    openai.api_key = f.readline().strip()

# ƒê·ªçc n·ªôi dung PDF
def read_pdf(file):
    doc = fitz.open(stream=file.read(), filetype="pdf")
    return "\n".join([page.get_text() for page in doc])

# ƒê·ªçc n·ªôi dung Word
def read_word(file):
    doc = Document(file)
    return "\n".join([para.text for para in doc.paragraphs])

# G·ªçi OpenAI API ƒë·ªÉ l·∫•y danh s√°ch ch∆∞∆°ng
def split_into_chapters_with_api(content):
    prompt = f"""
        D∆∞·ªõi ƒë√¢y l√† n·ªôi dung m·ªôt t√†i li·ªáu. H√£y tr√≠ch xu·∫•t t·∫•t c·∫£ c√°c ch∆∞∆°ng c√≥ trong t√†i li·ªáu.
        Tr·∫£ v·ªÅ danh s√°ch JSON h·ª£p l·ªá, trong ƒë√≥ m·ªói ch∆∞∆°ng l√† m·ªôt ph·∫ßn t·ª≠:
        [
            "Ch∆∞∆°ng 1: Ti√™u ƒë·ªÅ",
            "Ch∆∞∆°ng 2: Ti√™u ƒë·ªÅ",
            ...
        ]
        Ch·ªâ tr·∫£ v·ªÅ JSON h·ª£p l·ªá, kh√¥ng th√™m n·ªôi dung kh√°c.

        N·ªôi dung t√†i li·ªáu:
        {content}  
    """
    response = openai.ChatCompletion.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.5,
        max_tokens=4000
    )

    response_text = response['choices'][0]['message']['content'].strip()
    json_match = re.search(r'\[\s*("Ch∆∞∆°ng.*?")\s*\]', response_text, re.DOTALL)

    if json_match:
        json_text = json_match.group(0)
        try:
            return json.loads(json_text)
        except json.JSONDecodeError:
            st.error("L·ªói ph√¢n t√≠ch JSON t·ª´ OpenAI API.")
            return []
    else:
        st.error("Kh√¥ng t√¨m th·∫•y danh s√°ch ch∆∞∆°ng h·ª£p l·ªá trong ph·∫£n h·ªìi API.")
        return []

# **STREAMLIT UI**
st.title("üìö T·∫°o C√¢u H·ªèi Tr·∫Øc Nghi·ªám Theo Ch∆∞∆°ng")

# T·∫£i file l√™n
uploaded_file = st.file_uploader("üìÇ T·∫£i l√™n file PDF ho·∫∑c Word", type=["pdf", "docx"])

if uploaded_file:
    # L∆∞u n·ªôi dung file v√†o Session State ƒë·ªÉ tr√°nh ƒë·ªçc l·∫°i khi reload
    if "file_content" not in st.session_state:
        if uploaded_file.name.endswith(".pdf"):
            st.session_state.file_content = read_pdf(uploaded_file)
        elif uploaded_file.name.endswith(".docx"):
            st.session_state.file_content = read_word(uploaded_file)
        else:
            st.error("‚ö†Ô∏è ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.")
            st.session_state.file_content = ""

    # G·ªçi API OpenAI ƒë·ªÉ l·∫•y danh s√°ch ch∆∞∆°ng n·∫øu ch∆∞a c√≥
    if "chapters" not in st.session_state:
        with st.spinner("üîç ƒêang ph√¢n t√≠ch t√†i li·ªáu..."):
            st.session_state.chapters = split_into_chapters_with_api(st.session_state.file_content)

    chapters = st.session_state.chapters
    st.write(f"üìñ ƒê√£ ph√°t hi·ªán **{len(chapters)} ch∆∞∆°ng**.")

    # L∆∞u s·ªë l∆∞·ª£ng c√¢u h·ªèi v√†o Session State ƒë·ªÉ tr√°nh m·∫•t khi giao di·ªán c·∫≠p nh·∫≠t
    if "question_counts" not in st.session_state:
        st.session_state.question_counts = {chapter: 10 for chapter in chapters}  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh

    for i, chapter in enumerate(chapters):
        st.markdown(f"### üìñ {chapter}")
        st.session_state.question_counts[chapter] = st.number_input(
            f"S·ªë l∆∞·ª£ng c√¢u h·ªèi cho {chapter}",
            min_value=1, max_value=50,
            value=st.session_state.question_counts[chapter],
            key=f"num_questions_{i}"
        )

    # Khi nh·∫•n n√∫t, t·∫°o c√¢u h·ªèi tr·∫Øc nghi·ªám
    if st.button("üìù T·∫°o C√¢u H·ªèi Tr·∫Øc Nghi·ªám"):
        with st.spinner("‚è≥ ƒêang t·∫°o c√¢u h·ªèi..."):

            # T·∫°o danh s√°ch ch∆∞∆°ng v√† s·ªë l∆∞·ª£ng c√¢u h·ªèi mong mu·ªën
            chapter_questions = []
            for chapter in chapters:
                num_questions = st.session_state.question_counts[chapter]
                chapter_questions.append(f"- {chapter}: {num_questions} c√¢u h·ªèi")

            # T·∫°o prompt duy nh·∫•t cho to√†n b·ªô ch∆∞∆°ng
            prompt = f"""
            D∆∞·ªõi ƒë√¢y l√† danh s√°ch c√°c ch∆∞∆°ng v√† s·ªë l∆∞·ª£ng c√¢u h·ªèi mong mu·ªën:
            {chr(10).join(chapter_questions)}

            H√£y t·∫°o c√¢u h·ªèi tr·∫Øc nghi·ªám d·ª±a tr√™n n·ªôi dung c·ªßa t·ª´ng ch∆∞∆°ng.
            Y√™u c·∫ßu:
            - M·ªói c√¢u h·ªèi c√≥ 4 ƒë√°p √°n (A, B, C, D).
            - M·ªói c√¢u h·ªèi ph·∫£i c√≥ ƒë√°p √°n

            N·ªôi dung to√†n b·ªô t√†i li·ªáu:
            {st.session_state.file_content}
            """
            print("------------------ ")
            print(prompt)

            # G·ªçi API OpenAI m·ªôt l·∫ßn duy nh·∫•t
            # response = openai.ChatCompletion.create(
            #     model="gpt-4o-mini",
            #     messages=[{"role": "user", "content": prompt}],
            #     temperature=0.7
            # )

            # mcq_response = response['choices'][0]['message']['content']

            # # Hi·ªÉn th·ªã c√¢u h·ªèi tr·∫Øc nghi·ªám tr√™n giao di·ªán
            # st.subheader("üìú C√¢u H·ªèi Tr·∫Øc Nghi·ªám:")
            # st.markdown(mcq_response)

            # # Cho ph√©p t·∫£i xu·ªëng k·∫øt qu·∫£
            # st.download_button("üì• T·∫£i xu·ªëng c√¢u h·ªèi", mcq_response, file_name="mcqs.txt", mime="text/plain")
